01_스프링 프레임워크.txt

# 프레임워크 (Framework)

	- 프로젝트 개발에 효율적인 구조를 미리 만들어 놓은 것 (PPT 템플릿 같은 것)
	- 개발자는 이미 완성된 구조에 빈칸을 채우는 느낌으로 프로젝트를 진행 할 수 있다
	- 프레임워크의 장점 : 이미 구조가 잡혀 있어서 프로젝트의 전체적인 구조에 대한 지식이 없는
		 초보 개발자들도 프로젝트에 투입할 수 있다는 장점 (비용절감)
	- 일정 수준 이상의 품질이 항상 보장된다

# 스프링 프레임워크
	
	- 자바, JSP를 이용해 웹 애플리케이션 서버 개발을 효율적으로 진행하기 위한 프레임워크
	- 다양한 디자인 패턴 및 기능들이 미리 구현되어 있기 때문에 효율적으로 개발을 진행할 수 있다
	
# 스프링의 메인 컨섭

	1. POJO (Plain Old Java Object)
	 - JSP처럼 별도의 공부가 필요한 문법보다 Java의 문법을 선호한다
	 - 데이터 처리과정(백엔드)에 JSP코드가 섞이는 것은 바람직 하지 않으며
	   순수 JAVA코드로 작성되어야 한다
	 - 익숙하지 않은 별도의 API를 최소화하여 개발자들의 혼란을 방지한다
	2. 의존성 주입 (DI, Dependency Injection)
	 - 생성자를 아예 사용하지 말자 (생성자로 인해 유지보수 비용이 증가한다)
	 - 프로젝트 내부의 생성자 사용을 모두 제거하여 객체간의 결합도를 낮추었다 
	
	※ 결합도가 높다 - 하나 고쳤는데 에러(빨간줄)이 많이 뜬다
	※ 결합도가 낮다 - 하나 고쳤는데 아무 문제도 생기지 않고 잘 돌아간다...

# 스프링 프로젝트의 기본구조

	- src/main/java : 자바 코드를 작성하는 곳
	- src/main/resources : 자바 코드를 실행할 때 필요한 자원을 저장하는 곳
	- src/test/java : 작성한 자바 코드에 대한 테스트 코드를 작성하는 곳
	- src/test/resources : 테스트 코드를 실행할 때 필요한 자원들을 저장하는 곳
	- Maven Dependencies : 이 프로젝트가 의존하고 있는 다른 프로젝트들의 목록
	- webapp/resources : 웹 서버에서 사용되는 정적 자원들을 보관하는 곳
	- webapp/WEB-INF/spring/root-conetxt.xml : 전역 초기화 파라미터들을 정의하는 곳
	- webapp/WEB-INF/spring/appServlet/servlet-context.xml : appServlet에서 사용할 지역 초기화 파라미터들을 정의하는 곳
	- webapp/WEB-INF/views :뷰 페이지들(.jsp)을 보관하는 곳
	- webapp/WEB-INF/web.xml : 웹 서버 설정 파일
	- pom.xml (Project Object Model) : 메이븐 설정 파일
	
	
	
	
	